import math
from random import *


# warm up - throwing the ball from each floor
def Glass_Ball_Test(height_of_building, break_point_passed):
    count = 0
    n = height_of_building
    break_point = break_point_passed
    for test in range(n + 1):
        if test == break_point:
            return test,"count is: " + str(count)
        count += 1

# from here on out we will be using 2 glass balls

# O(n/2) comparisons through calculation of mid
def Two_Glass_Balls_halfpoint_test(last_floor, break_point_passed):
    n = last_floor
    count = 0
    break_point = break_point_passed
    mid = n // 2
    if break_point >= mid:
        for test in range(mid, n + 1):
            if test == break_point:
                return test, "count is: " + str(count)
            count += 1
    else:
        for test in range(1, mid):
            if test == break_point:
                return test, "count is: " + str(count)
            count += 1


# O(2 * sqrt(n)) comparisons
def Optimal_Testing(last_floor, break_point_passed):
    n = last_floor
    potn_range = [0,0]
    count = 0
    break_point = break_point_passed
    d = round(math.sqrt(n))
    temp = 0
    for test in range(1, n + d, d):
        temp = test
        if test >= break_point:
            potn_range[0] = test - d
            potn_range[1] = test
            break
        count += 1
    for i in range(potn_range[0], potn_range[1] + 1):
        if i == break_point:
            return i, "count is: " + str(count)
        count += 1



# dividing the floors unevenly - O(sqrt(2*n)) comparisons
def Optimal_Testing_extended(last_floor, break_point_passed):
    n = last_floor
    k = 1; p = 1
    potn_range = [0,0]
    count = 0
    floors = []
    # uneven division
    while k < n:
        floors.insert(0,k)
        p += 1
        k += p
    floors.insert(0,100)
    # Initialize break point
    break_point = break_point_passed
    else:
        for i in range(len(floors)):
            if floors[i] <= break_point:
                potn_range[0] = floors[i]
                potn_range[1] = floors[i-1]
                break
            count += 1
    for test in range(potn_range[0],potn_range[1] + 1):
        if test == break_point:
            return test, "count is: " + str(count)
        count += 1




def main():
    break_point_passed = randint(1,100)
    print(Glass_Ball_Test(100, break_point_passed))
    print(Two_Glass_Balls_halfpoint_test(100, break_point_passed))
    print(Optimal_Testing(100, break_point_passed))
    print(Optimal_Testing_extended(100, break_point_passed))


if __name__ == '__main__':
    main()
